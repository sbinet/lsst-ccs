linux design
============

http://www.makelinux.net/ldd3/
http://lxr.free-electrons.com/source/include/linux/pci.h
https://www.kernel.org/doc/Documentation/driver-model/driver.txt

685 /**
686  * struct device - The basic device structure
687  * @parent:     The device's "parent" device, the device to which it is attached.
688  *              In most cases, a parent device is some sort of bus or host
689  *              controller. If parent is NULL, the device, is a top-level device,
690  *              which is not usually what you want.
691  * @p:          Holds the private data of the driver core portions of the device.
692  *              See the comment of the struct device_private for detail.
693  * @kobj:       A top-level, abstract class from which other classes are derived.
694  * @init_name:  Initial name of the device.
695  * @type:       The type of device.
696  *              This identifies the device type and carries type-specific
697  *              information.
698  * @mutex:      Mutex to synchronize calls to its driver.
699  * @bus:        Type of bus device is on.
700  * @driver:     Which driver has allocated this
701  * @platform_data: Platform data specific to the device.
702  *              Example: For devices on custom boards, as typical of embedded
703  *              and SOC based hardware, Linux often uses platform_data to point
704  *              to board-specific structures describing devices and how they
705  *              are wired.  That can include what ports are available, chip
706  *              variants, which GPIO pins act in what additional roles, and so
707  *              on.  This shrinks the "Board Support Packages" (BSPs) and
708  *              minimizes board-specific #ifdefs in drivers.
709  * @driver_data: Private pointer for driver specific info.
710  * @power:      For device power management.
711  *              See Documentation/power/devices.txt for details.
712  * @pm_domain:  Provide callbacks that are executed during system suspend,
713  *              hibernation, system resume and during runtime PM transitions
714  *              along with subsystem-level and driver-level callbacks.
715  * @pins:       For device pin management.
716  *              See Documentation/pinctrl.txt for details.
717  * @numa_node:  NUMA node this device is close to.
718  * @dma_mask:   Dma mask (if dma'ble device).
719  * @coherent_dma_mask: Like dma_mask, but for alloc_coherent mapping as not all
720  *              hardware supports 64-bit addresses for consistent allocations
721  *              such descriptors.
722  * @dma_pfn_offset: offset of DMA memory range relatively of RAM
723  * @dma_parms:  A low level driver may set these to teach IOMMU code about
724  *              segment limitations.
725  * @dma_pools:  Dma pools (if dma'ble device).
726  * @dma_mem:    Internal for coherent mem override.
727  * @cma_area:   Contiguous memory area for dma allocations
728  * @archdata:   For arch-specific additions.
729  * @of_node:    Associated device tree node.
730  * @fwnode:     Associated device node supplied by platform firmware.
731  * @devt:       For creating the sysfs "dev".
732  * @id:         device instance
733  * @devres_lock: Spinlock to protect the resource of the device.
734  * @devres_head: The resources list of the device.
735  * @knode_class: The node used to add the device to the class list.
736  * @class:      The class of the device.
737  * @groups:     Optional attribute groups.
738  * @release:    Callback to free the device after all references have
739  *              gone away. This should be set by the allocator of the
740  *              device (i.e. the bus driver that discovered the device).
741  * @iommu_group: IOMMU group the device belongs to.
742  *
743  * @offline_disabled: If set, the device is permanently online.
744  * @offline:    Set after successful invocation of bus type's .offline().
745  *
746  * At the lowest level, every device in a Linux system is represented by an
747  * instance of struct device. The device structure contains the information
748  * that the device model core needs to model the system. Most subsystems,
749  * however, track additional information about the devices they host. As a
750  * result, it is rare for devices to be represented by bare device structures;
751  * instead, that structure, like kobject structures, is usually embedded within
752  * a higher-level representation of the device.
753  */
754 struct device {
755         struct device           *parent;
756 
757         struct device_private   *p;
758 
759         struct kobject kobj;
760         const char              *init_name; /* initial name of the device */
761         const struct device_type *type;
762 
763         struct mutex            mutex;  /* mutex to synchronize calls to
764                                          * its driver.
765                                          */
766 
767         struct bus_type *bus;           /* type of bus device is on */
768         struct device_driver *driver;   /* which driver has allocated this
769                                            device */
770         void            *platform_data; /* Platform specific data, device
771                                            core doesn't touch it */
772         void            *driver_data;   /* Driver data, set and get with
773                                            dev_set/get_drvdata */
774         struct dev_pm_info      power;
775         struct dev_pm_domain    *pm_domain;
776 
777 #ifdef CONFIG_PINCTRL
778         struct dev_pin_info     *pins;
779 #endif
780 
781 #ifdef CONFIG_NUMA
782         int             numa_node;      /* NUMA node this device is close to */
783 #endif
784         u64             *dma_mask;      /* dma mask (if dma'able device) */
785         u64             coherent_dma_mask;/* Like dma_mask, but for
786                                              alloc_coherent mappings as
787                                              not all hardware supports
788                                              64 bit addresses for consistent
789                                              allocations such descriptors. */
790         unsigned long   dma_pfn_offset;
791 
792         struct device_dma_parameters *dma_parms;
793 
794         struct list_head        dma_pools;      /* dma pools (if dma'ble) */
795 
796         struct dma_coherent_mem *dma_mem; /* internal for coherent mem
797                                              override */
798 #ifdef CONFIG_DMA_CMA
799         struct cma *cma_area;           /* contiguous memory area for dma
800                                            allocations */
801 #endif
802         /* arch specific additions */
803         struct dev_archdata     archdata;
804 
805         struct device_node      *of_node; /* associated device tree node */
806         struct fwnode_handle    *fwnode; /* firmware device node */
807 
808         dev_t                   devt;   /* dev_t, creates the sysfs "dev" */
809         u32                     id;     /* device instance */
810 
811         spinlock_t              devres_lock;
812         struct list_head        devres_head;
813 
814         struct klist_node       knode_class;
815         struct class            *class;
816         const struct attribute_group **groups;  /* optional groups */
817 
818         void    (*release)(struct device *dev);
819         struct iommu_group      *iommu_group;
820 
821         bool                    offline_disabled:1;
822         bool                    offline:1;
823 };


226 /**
227  * struct device_driver - The basic device driver structure
228  * @name:       Name of the device driver.
229  * @bus:        The bus which the device of this driver belongs to.
230  * @owner:      The module owner.
231  * @mod_name:   Used for built-in modules.
232  * @suppress_bind_attrs: Disables bind/unbind via sysfs.
233  * @probe_type: Type of the probe (synchronous or asynchronous) to use.
234  * @of_match_table: The open firmware table.
235  * @acpi_match_table: The ACPI match table.
236  * @probe:      Called to query the existence of a specific device,
237  *              whether this driver can work with it, and bind the driver
238  *              to a specific device.
239  * @remove:     Called when the device is removed from the system to
240  *              unbind a device from this driver.
241  * @shutdown:   Called at shut-down time to quiesce the device.
242  * @suspend:    Called to put the device to sleep mode. Usually to a
243  *              low power state.
244  * @resume:     Called to bring a device from sleep mode.
245  * @groups:     Default attributes that get created by the driver core
246  *              automatically.
247  * @pm:         Power management operations of the device which matched
248  *              this driver.
249  * @p:          Driver core's private data, no one other than the driver
250  *              core can touch this.
251  *
252  * The device driver-model tracks all of the drivers known to the system.
253  * The main reason for this tracking is to enable the driver core to match
254  * up drivers with new devices. Once drivers are known objects within the
255  * system, however, a number of other things become possible. Device drivers
256  * can export information and configuration variables that are independent
257  * of any specific device.
258  */
259 struct device_driver {
260         const char              *name;
261         struct bus_type         *bus;
262 
263         struct module           *owner;
264         const char              *mod_name;      /* used for built-in modules */
265 
266         bool suppress_bind_attrs;       /* disables bind/unbind via sysfs */
267         enum probe_type probe_type;
268 
269         const struct of_device_id       *of_match_table;
270         const struct acpi_device_id     *acpi_match_table;
271 
272         int (*probe) (struct device *dev);
273         int (*remove) (struct device *dev);
274         void (*shutdown) (struct device *dev);
275         int (*suspend) (struct device *dev, pm_message_t state);
276         int (*resume) (struct device *dev);
277         const struct attribute_group **groups;
278 
279         const struct dev_pm_ops *pm;
280 
281         struct driver_private *p;
282 };


 62 /**
 63  * struct bus_type - The bus type of the device
 64  *
 65  * @name:       The name of the bus.
 66  * @dev_name:   Used for subsystems to enumerate devices like ("foo%u", dev->id).
 67  * @dev_root:   Default device to use as the parent.
 68  * @dev_attrs:  Default attributes of the devices on the bus.
 69  * @bus_groups: Default attributes of the bus.
 70  * @dev_groups: Default attributes of the devices on the bus.
 71  * @drv_groups: Default attributes of the device drivers on the bus.
 72  * @match:      Called, perhaps multiple times, whenever a new device or driver
 73  *              is added for this bus. It should return a nonzero value if the
 74  *              given device can be handled by the given driver.
 75  * @uevent:     Called when a device is added, removed, or a few other things
 76  *              that generate uevents to add the environment variables.
 77  * @probe:      Called when a new device or driver add to this bus, and callback
 78  *              the specific driver's probe to initial the matched device.
 79  * @remove:     Called when a device removed from this bus.
 80  * @shutdown:   Called at shut-down time to quiesce the device.
 81  *
 82  * @online:     Called to put the device back online (after offlining it).
 83  * @offline:    Called to put the device offline for hot-removal. May fail.
 84  *
 85  * @suspend:    Called when a device on this bus wants to go to sleep mode.
 86  * @resume:     Called to bring a device on this bus out of sleep mode.
 87  * @pm:         Power management operations of this bus, callback the specific
 88  *              device driver's pm-ops.
 89  * @iommu_ops:  IOMMU specific operations for this bus, used to attach IOMMU
 90  *              driver implementations to a bus and allow the driver to do
 91  *              bus-specific setup
 92  * @p:          The private data of the driver core, only the driver core can
 93  *              touch this.
 94  * @lock_key:   Lock class key for use by the lock validator
 95  *
 96  * A bus is a channel between the processor and one or more devices. For the
 97  * purposes of the device model, all devices are connected via a bus, even if
 98  * it is an internal, virtual, "platform" bus. Buses can plug into each other.
 99  * A USB controller is usually a PCI device, for example. The device model
100  * represents the actual connections between buses and the devices they control.
101  * A bus is represented by the bus_type structure. It contains the name, the
102  * default attributes, the bus' methods, PM operations, and the driver core's
103  * private data.
104  */
105 struct bus_type {
106         const char              *name;
107         const char              *dev_name;
108         struct device           *dev_root;
109         struct device_attribute *dev_attrs;     /* use dev_groups instead */
110         const struct attribute_group **bus_groups;
111         const struct attribute_group **dev_groups;
112         const struct attribute_group **drv_groups;
113 
114         int (*match)(struct device *dev, struct device_driver *drv);
115         int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
116         int (*probe)(struct device *dev);
117         int (*remove)(struct device *dev);
118         void (*shutdown)(struct device *dev);
119 
120         int (*online)(struct device *dev);
121         int (*offline)(struct device *dev);
122 
123         int (*suspend)(struct device *dev, pm_message_t state);
124         int (*resume)(struct device *dev);
125 
126         const struct dev_pm_ops *pm;
127 
128         const struct iommu_ops *iommu_ops;
129 
130         struct subsys_private *p;
131         struct lock_class_key lock_key;
132 };

651 struct pci_driver {
652         struct list_head node;
653         const char *name;
654         const struct pci_device_id *id_table;   /* must be non-NULL for probe to be called */
655         int  (*probe)  (struct pci_dev *dev, const struct pci_device_id *id);   /* New device inserted */
656         void (*remove) (struct pci_dev *dev);   /* Device removed (NULL if not a hot-plug capable driver) */
657         int  (*suspend) (struct pci_dev *dev, pm_message_t state);      /* Device suspended */
658         int  (*suspend_late) (struct pci_dev *dev, pm_message_t state);
659         int  (*resume_early) (struct pci_dev *dev);
660         int  (*resume) (struct pci_dev *dev);                   /* Device woken up */
661         void (*shutdown) (struct pci_dev *dev);
662         int (*sriov_configure) (struct pci_dev *dev, int num_vfs); /* PF pdev */
663         const struct pci_error_handlers *err_handler;
664         struct device_driver    driver;
665         struct pci_dynids dynids;
666 };


443 struct pci_bus {
444         struct list_head node;          /* node in list of buses */
445         struct pci_bus  *parent;        /* parent bus this bridge is on */
446         struct list_head children;      /* list of child buses */
447         struct list_head devices;       /* list of devices on this bus */
448         struct pci_dev  *self;          /* bridge device as seen by parent */
449         struct list_head slots;         /* list of slots on this bus */
450         struct resource *resource[PCI_BRIDGE_RESOURCE_NUM];
451         struct list_head resources;     /* address space routed to this bus */
452         struct resource busn_res;       /* bus numbers routed to this bus */
453 
454         struct pci_ops  *ops;           /* configuration access functions */
455         struct msi_controller *msi;     /* MSI controller */
456         void            *sysdata;       /* hook for sys-specific extension */
457         struct proc_dir_entry *procdir; /* directory entry in /proc/bus/pci */
458 
459         unsigned char   number;         /* bus number */
460         unsigned char   primary;        /* number of primary bridge */
461         unsigned char   max_bus_speed;  /* enum pci_bus_speed */
462         unsigned char   cur_bus_speed;  /* enum pci_bus_speed */
463 #ifdef CONFIG_PCI_DOMAINS_GENERIC
464         int             domain_nr;
465 #endif
466 
467         char            name[48];
468 
469         unsigned short  bridge_ctl;     /* manage NO_ISA/FBB/et al behaviors */
470         pci_bus_flags_t bus_flags;      /* inherited by child buses */
471         struct device           *bridge;
472         struct device           dev;
473         struct bin_attribute    *legacy_io; /* legacy I/O for this bus */
474         struct bin_attribute    *legacy_mem; /* legacy mem */
475         unsigned int            is_added:1;
476 };


253 /*
254  * The pci_dev structure is used to describe PCI devices.
255  */
256 struct pci_dev {
257         struct list_head bus_list;      /* node in per-bus list */
258         struct pci_bus  *bus;           /* bus this device is on */
259         struct pci_bus  *subordinate;   /* bus this device bridges to */
260 
261         void            *sysdata;       /* hook for sys-specific extension */
262         struct proc_dir_entry *procent; /* device entry in /proc/bus/pci */
263         struct pci_slot *slot;          /* Physical slot this device is in */
264 
265         unsigned int    devfn;          /* encoded device & function index */
266         unsigned short  vendor;
267         unsigned short  device;
268         unsigned short  subsystem_vendor;
269         unsigned short  subsystem_device;
270         unsigned int    class;          /* 3 bytes: (base,sub,prog-if) */
271         u8              revision;       /* PCI revision, low byte of class word */
272         u8              hdr_type;       /* PCI header type (`multi' flag masked out) */
273         u8              pcie_cap;       /* PCIe capability offset */
274         u8              msi_cap;        /* MSI capability offset */
275         u8              msix_cap;       /* MSI-X capability offset */
276         u8              pcie_mpss:3;    /* PCIe Max Payload Size Supported */
277         u8              rom_base_reg;   /* which config register controls the ROM */
278         u8              pin;            /* which interrupt pin this device uses */
279         u16             pcie_flags_reg; /* cached PCIe Capabilities Register */
280         u8              dma_alias_devfn;/* devfn of DMA alias, if any */
281 
282         struct pci_driver *driver;      /* which driver has allocated this device */
283         u64             dma_mask;       /* Mask of the bits of bus address this
284                                            device implements.  Normally this is
285                                            0xffffffff.  You only need to change
286                                            this if your device has broken DMA
287                                            or supports 64-bit transfers.  */
288 ...
};
